import os
from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from .keyboards import main_menu_keyboard, template_topics_keyboard
from core.rag_processor import RAGProcessor # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç

router = Router()
rag_processor = RAGProcessor() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–¥–∏–Ω —Ä–∞–∑

TEMPLATES_DIR = "data/knowledge_base/templates/" # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —à–∞–±–ª–æ–Ω–æ–≤
class TemplateRequest(StatesGroup):
    waiting_for_topic = State()
    waiting_for_keywords = State()

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –±–æ—Ç-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ –ø–æ—Å—É—Ç–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥–µ.\n"
        "–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.",
        reply_markup=main_menu_keyboard()
    )

@router.callback_query(F.data == "back_to_main_menu")
async def cq_back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=main_menu_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(F.data.startswith("topic_"))
async def cq_topic_selected(callback: types.CallbackQuery):
    topic_name = callback.data.split("_")[1].capitalize()
    # –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –¥–∞—Ç—å –∫–∞–∫–æ–π-—Ç–æ –æ–±—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ —Ç–µ–º–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –≤—ã–±–æ—Ä –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: {topic_name}. –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ."
    )
    await callback.answer() # –ó–∞–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —à–∞–±–ª–æ–Ω–æ–≤ ---
@router.callback_query(F.data == "request_template_start")
async def cq_request_template_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(TemplateRequest.waiting_for_keywords) # –°—Ä–∞–∑—É –Ω–∞ –≤–≤–æ–¥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    # await state.set_state(TemplateRequest.waiting_for_topic) # –ï—Å–ª–∏ —Ö–æ—Ç–∏–º —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä —Ç–µ–º—ã
    # await callback.message.edit_text(
    #     "–ü–æ –∫–∞–∫–æ–π —Ç–µ–º–µ –≤–∞–º –Ω—É–∂–µ–Ω —à–∞–±–ª–æ–Ω?",
    #     reply_markup=template_topics_keyboard()
    # )
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≤–∞–∫–∞–Ω—Å–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä' –∏–ª–∏ '—á–µ–∫-–ª–∏—Å—Ç –≥–æ—Ä–Ω–∏—á–Ω–∞—è')."
    )
    await callback.answer()

# @router.callback_query(TemplateRequest.waiting_for_topic, F.data.startswith("template_topic_"))
# async def cq_template_topic_selected(callback: types.CallbackQuery, state: FSMContext):
#     topic_name = callback.data.split("_")[-1] # –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ template_topic_
#     await state.update_data(selected_topic=topic_name)
#     await state.set_state(TemplateRequest.waiting_for_keywords)
#     await callback.message.edit_text(
#         f"–¢–µ–º–∞: {topic_name.capitalize()}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≤–∞–∫–∞–Ω—Å–∏—è', '—Ä–µ–≥–ª–∞–º–µ–Ω—Ç')."
#     )
#     await callback.answer()

@router.message(TemplateRequest.waiting_for_keywords)
async def process_template_keywords(message: types.Message, state: FSMContext):
    # data = await state.get_data()
    # topic = data.get("selected_topic") # –µ—Å–ª–∏ –±—ã–ª –≤—ã–±–æ—Ä —Ç–µ–º—ã
    keywords = message.text.lower().split()
    await state.clear()

    found_files = []
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: –∏—â–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º (–∏–ª–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π, –µ—Å–ª–∏ –±—ã–ª –≤—ã–±–æ—Ä)
    # search_path = os.path.join(TEMPLATES_DIR, topic) if topic else TEMPLATES_DIR
    search_path = TEMPLATES_DIR

    for root, _, files in os.walk(search_path):
        for file_name in files:
            # –ò—â–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            if all(keyword in file_name.lower() for keyword in keywords):
                found_files.append(os.path.join(root, file_name))
    
    if found_files:
        await message.answer(f"–ù–∞—à–µ–ª —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–±–ª–æ–Ω—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É ({message.text}):")
        for file_path in found_files:
            try:
                doc = types.FSInputFile(file_path)
                await message.answer_document(doc)
            except Exception as e:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {os.path.basename(file_path)}: {e}")
        # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
        await message.answer("–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=main_menu_keyboard())
    else:
        await message.answer(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–µ–ª —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{message.text}'. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –≤ –±–∞–∑–µ.",
            reply_markup=main_menu_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(F.text)
async def handle_text_question(message: types.Message):
    user_question = message.text
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å —à–∞–±–ª–æ–Ω–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    # (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ NLP –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–Ω—Ç–µ–Ω—Ç–∞)
    template_keywords = ["—à–∞–±–ª–æ–Ω", "—á–µ–∫-–ª–∏—Å—Ç", "—Ä–µ–≥–ª–∞–º–µ–Ω—Ç", "–¥–æ–∫—É–º–µ–Ω—Ç", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "–≤–∞–∫–∞–Ω—Å–∏—è"]
    if any(keyword in user_question.lower() for keyword in template_keywords):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
        # –≠—Ç–æ –¥—É–±–ª–∏—Ä—É–µ—Ç –Ω–µ–º–Ω–æ–≥–æ FSM, –Ω–æ —É–ø—Ä–æ—â–∞–µ—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        keywords_for_search = user_question.lower()
        for tk in template_keywords: # —É–±–µ—Ä–µ–º —Å–∞–º–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            keywords_for_search = keywords_for_search.replace(tk, "")
        keywords_for_search = keywords_for_search.strip().split()

        if not keywords_for_search:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —à–∞–±–ª–æ–Ω –≤–∞–º –Ω—É–∂–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—à–∞–±–ª–æ–Ω –≤–∞–∫–∞–Ω—Å–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞').", reply_markup=main_menu_keyboard())
            return

        # –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è —Ç–æ–π, —á—Ç–æ –≤ FSM
        found_files = []
        for root, _, files in os.walk(TEMPLATES_DIR):
            for file_name in files:
                if all(keyword in file_name.lower() for keyword in keywords_for_search):
                    found_files.append(os.path.join(root, file_name))
        
        if found_files:
            await message.answer(f"–ü–æ—Ö–æ–∂–µ, –≤—ã –∏—â–µ—Ç–µ —à–∞–±–ª–æ–Ω. –ù–∞—à–µ–ª —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{user_question}':")
            for file_path in found_files:
                try:
                    doc = types.FSInputFile(file_path)
                    await message.answer_document(doc)
                except Exception as e:
                    await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª {os.path.basename(file_path)}: {e}")
            await message.answer("–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–æ, —á—Ç–æ –≤—ã –∏—Å–∫–∞–ª–∏, –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –µ–≥–æ.", reply_markup=main_menu_keyboard())
            return
        else:
            await message.answer(f"–Ø –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ —à–∞–±–ª–æ–Ω, –Ω–æ –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{user_question}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é '–ó–∞–ø—Ä–æ—Å–∏—Ç—å —à–∞–±–ª–æ–Ω' –≤ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
            return


    # –ï—Å–ª–∏ –Ω–µ –∑–∞–ø—Ä–æ—Å —à–∞–±–ª–æ–Ω–∞, —Ç–æ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å –∫ RAG
    await message.answer("–ü–æ–ª—É—á–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å, —Å–µ–π—á–∞—Å –ø–æ–¥—É–º–∞—é... ü§î")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º run_in_executor –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–∑–æ–≤–∞ RAG
    # —Ç–∞–∫ –∫–∞–∫ RAG –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–∏–º
    loop = asyncio.get_event_loop()
    try:
        # –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ rag_processor.get_answer() - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏ –±–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        # –ï—Å–ª–∏ –æ–Ω–∞ –±—É–¥–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≤–Ω—É—Ç—Ä–∏, —Ç–æ —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ.
        # –ù–æ sentence-transformers –∏ faiss –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ.
        answer = await loop.run_in_executor(None, rag_processor.get_answer, user_question)
    except Exception as e:
        print(f"Error during RAG processing: {e}")
        answer = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    await message.answer(answer, reply_markup=main_menu_keyboard())